import psycopg2
import pymysql as pymysql
import requests
from telebot import TeleBot, types

import db_working
from config import *

bot = TeleBot(token=TOKEN)
temp_bots = {}
allowed_users = ['msnetwin', 'aircradmin']


class AddUser:
    def __init__(self):
        self.username = None
        self.date = None


def connect():
    return psycopg2.connect(dbname=DB_NAME, user=USER, password=PASSWORD, host=HOST)


def main_bar(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    con = connect()
    with con.cursor() as cursor:
        cursor.execute("SELECT * FROM bots")
        for i in cursor.fetchall():
            markup.add(types.InlineKeyboardButton(i[1], callback_data=f"bots:{i[1]}"))
    con.close()
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", reply_markup=markup)
    markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "üòâ", reply_markup=markup)


@bot.message_handler(commands=["start"])
def start(message: types.Message):
    if message.from_user.username not in allowed_users:
        return
    main_bar(message)


@bot.callback_query_handler(lambda callback: callback.data.startswith("bots:"))
def bot_actions(call: types.CallbackQuery):
    if call.from_user.username not in allowed_users:
        return
    data = call.data.split(":")[-1]
    temp_bots[call.from_user.id] = data
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    items = [
        types.KeyboardButton("–Æ–∑–µ—Ä—ã"),
        types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ]
    markup.add(*items, row_width=2)
    bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –±–æ—Ç–∞", reply_markup=markup)


@bot.callback_query_handler(lambda callback: callback.data.startswith("ban:"))
def bot_actions(call: types.CallbackQuery):
    if call.from_user.username not in allowed_users:
        return
    data = call.data.split(":")[-1]
    con = connect()
    with con.cursor() as cursor:
        cursor.execute(f"SELECT * FROM users WHERE (username = '{data}');")
        cursor.execute(f"UPDATE users SET status = 'Ban' WHERE (username = '{data}');")
    con.commit()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    items = [
        types.KeyboardButton("–Æ–∑–µ—Ä—ã"),
        types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ]
    markup.add(*items, row_width=1)
    bot.send_message(call.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.",
                     reply_markup=markup)
    con.close()


@bot.callback_query_handler(lambda callback: callback.data.startswith("deban:"))
def bot_actions(call: types.CallbackQuery):
    if call.from_user.username not in allowed_users:
        return
    db_working.deban(call.data.split(":")[1])
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    items = [
        types.KeyboardButton("–Æ–∑–µ—Ä—ã"),
        types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ]
    markup.add(*items, row_width=1)
    bot.send_message(call.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                     reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def main_menu(message: types.Message):
    if message.from_user.username not in allowed_users:
        return
    main_bar(message)


@bot.message_handler(func=lambda message: message.text == "–Æ–∑–µ—Ä—ã")
def stats(message: types.Message):
    if message.from_user.username not in allowed_users:
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*[
        types.KeyboardButton("–ê–∫—Ç–∏–≤–Ω—ã–µ"),
        types.KeyboardButton("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"),
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Æ–∑–µ—Ä–∞"),
        types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ], row_width=2)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
    con.close()


@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –Æ–∑–µ—Ä–∞")
def stats(message: types.Message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username –Æ–∑–µ—Ä–∞", reply_markup=types.ReplyKeyboardRemove())
    users[message.chat.id] = "ADD USER"


@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def stats(message: types.Message):
    con = connect()
    with con.cursor() as cursor:
        cursor.execute(
            f"SELECT * FROM users WHERE bot_id = '{temp_bots.get(message.chat.id, False)}'")
        f = cursor.fetchall()
        if len(f) == 0:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        for i in f:
            markup = types.InlineKeyboardMarkup()
            if temp_bots.get(message.chat.id) != "Dobby.Seller":
                bot.send_message(message.chat.id, f"<b>–Æ–∑–µ—Ä</b>: @{i[1]}\n"
                                                  f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ</b>: {i[3]}",
                                 reply_markup=markup, parse_mode="HTML")
            else:
                conq = pymysql.connect(host="localhost", user="root", password="1234", db="dobby.admin")
                with conq.cursor() as cursor4:
                    cursor4.execute(f"SELECT * FROM `client_bots` WHERE user_id = '{i[-1]}'")
                    print(i[-1])
                    token = cursor4.fetchall()[0][1]
                conq.close()

                url = f"https://api.telegram.org/bot{token}/getMe"
                headers = {
                    "accept": "application/json",
                    "User-Agent": "Telegram Bot SDK - (https://github.com/irazasyed/telegram-bot-sdk)"
                }
                try:
                    username = "@" + requests.post(url, headers=headers).json()['result']['username']
                except:
                    username = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                bot.send_message(message.chat.id, f"<b>–Æ–∑–µ—Ä</b>: @{i[1]}\n"
                                                  f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ</b>: {i[3]}\n"
                                                  f"<b>–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç</b>: {username}",
                                 reply_markup=markup, parse_mode="HTML")
    con.close()


@bot.message_handler(func=lambda message: users.get(message.chat.id) == "ADD USER")
def stats(message: types.Message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")
    temp_users[message.chat.id] = message.text
    users[message.chat.id] = "DATE ADD USER"


@bot.message_handler(func=lambda message: users.get(message.chat.id) == "DATE ADD USER")
def stats(message: types.Message):
    db_working.add_user(username=temp_users.get(message.chat.id), date=message.text,
                        bot_id=temp_bots.get(message.chat.id), user_id=message.chat.id)
    users[message.chat.id] = None
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add("–Æ–∑–µ—Ä—ã")
    bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ê–∫—Ç–∏–≤–Ω—ã–µ")
def stats(message: types.Message):
    if message.from_user.username not in allowed_users:
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*[
        types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.KeyboardButton("–Æ–∑–µ—Ä—ã")
    ], row_width=2)
    con = connect()
    with con.cursor() as cursor:
        users = {}
        cursor.execute(
            f"SELECT * FROM users WHERE bot_id = '{temp_bots.get(message.chat.id, False)}' AND status = 'Active'")
        f = cursor.fetchall()
        if len(f) == 0:
            bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
        for i in f:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban:{i[1]}"))
            bot.send_message(message.chat.id, f"<b>–Æ–∑–µ—Ä</b>: @{i[1]}\n"
                                              f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ</b>: {i[3]}",
                             reply_markup=markup, parse_mode="HTML")
    con.close()


@bot.message_handler(func=lambda message: message.text == "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ")
def stats(message: types.Message):
    if message.from_user.username not in allowed_users:
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*[
        types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.KeyboardButton("–Æ–∑–µ—Ä—ã")
    ], row_width=2)
    con = connect()
    with con.cursor() as cursor:
        users = {}
        cursor.execute(
            f"SELECT * FROM users WHERE bot_id = '{temp_bots.get(message.chat.id, False)}' AND status = 'Ban'")
        f = cursor.fetchall()
        if len(f) == 0:
            bot.send_message(message.chat.id, "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
        for i in f:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"deban:{i[1]}"))
            bot.send_message(message.chat.id, f"<b>–Æ–∑–µ—Ä</b>: @{i[1]}\n"
                                              f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ</b>: {i[3]}",
                             reply_markup=markup, parse_mode="HTML")
    con.close()


if __name__ == "__main__":
    users = {}
    temp_users = {}
    con = connect()
    with con.cursor() as cursor:
        cursor.execute("""CREATE TABLE IF NOT EXISTS users (
                      id SERIAL NOT NULL,
                      username text NOT NULL,
                      status text NOT NULL,
                      subscribe text NOT NULL,
                      bot_id text NOT NULL,
                      user_id text NOT NULL,
                      PRIMARY KEY (id));""")

        cursor.execute("""CREATE TABLE IF NOT EXISTS messages (
                      id SERIAL NOT NULL,
                      bot_id text NOT NULL,
                      username text NOT NULL,
                      text text NOT NULL,
                      datetime text NOT NULL,
                      PRIMARY KEY (id));""")
        cursor.execute("""CREATE TABLE IF NOT EXISTS bots (
                      id SERIAL NOT NULL,
                      name text NOT NULL,
                      img text NOT NULL,
                      messages text NOT NULL,
                      status text NOT NULL,
                      PRIMARY KEY (id));""")
    con.commit()
    con.close()
    bot.infinity_polling()
